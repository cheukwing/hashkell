module Middleend (
    Middleend.DependencyGraph.DependencyGraph,
    Middleend.DependencyGraph.Dependency,
    Middleend.DependencyGraph.DNode(..),
    Middleend.DependencyGraph.DType(..),
    Middleend.DependencyGraph.DExpr(..),
    Middleend.DependencyGraph.DLit(..),
    Middleend.Paralleliser.EncodingInstructionTable,
    Middleend.Paralleliser.EncodingInstruction(..),
    pipeline
) where

import Frontend (AggregationTable)

import Hashkell.Syntax
import Middleend.Cleaner
import Middleend.Paralleliser
import Middleend.DependencyGraph

-- pipeline cleans up the given aggregation table by renaming any reused
-- identifier names or names similar to those generated by the paralleliser,
-- and removing any unused identifier definitions.
-- these clean up steps ensure that the encoding instructions generated from the
-- aggregation table are correct
pipeline :: Steps -> MergeAtomic -> AggregationTable -> EncodingInstructionTable
pipeline steps ma
    = createEncodingInstructionTable steps ma . cleanup